"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReactAppType = void 0;
const dependency_resolver_1 = require("@teambit/dependency-resolver");
const workspace_1 = __importDefault(require("@teambit/workspace"));
const react_application_1 = require("./react.application");
class ReactAppType {
    constructor(name, logger, dependencyResolver, pubsub, workspacePath) {
        this.name = name;
        this.logger = logger;
        this.dependencyResolver = dependencyResolver;
        this.pubsub = pubsub;
        this.workspacePath = workspacePath;
    }
    createApp(options) {
        return new react_application_1.ReactApp(options.name, options.entry, options.ssr, options.portRange || [3000, 4000], this.logger, this.dependencyResolver, this.pubsub, this.workspacePath, options.prerender, options.bundler, options.ssrBundler, options.devServer, options.webpackTransformers, options.deploy, options.favicon);
    }
    static from(appTypeOptions = {}) {
        return (context) => {
            var _a;
            const name = appTypeOptions.name || 'react-18-app';
            const logger = context.createLogger(name);
            const depsResolver = context.getAspect(dependency_resolver_1.DependencyResolverAspect.id);
            let workspacePath;
            // TODO: replace this try catch with context.hasAspect once it's available from harmony
            try {
                workspacePath = (_a = context.getAspect(workspace_1.default.id)) === null || _a === void 0 ? void 0 : _a.path;
            }
            catch (err) {
                // Ignore, we might be running not from within a workspace, for example when bit sign
                // this is fine.
            }
            const pubsub = context.getAspect('teambit.harmony/pubsub');
            return new ReactAppType(name, logger, depsResolver, pubsub, workspacePath);
        };
    }
}
exports.ReactAppType = ReactAppType;
//# sourceMappingURL=react.app-type.js.map