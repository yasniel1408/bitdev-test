"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceTerserPlugin = exports.setOutput = exports.addDevServer = void 0;
const lodash_1 = require("lodash");
const terser_webpack_plugin_1 = __importDefault(require("terser-webpack-plugin"));
function CreateTerserPlugin() {
    return new terser_webpack_plugin_1.default({
        minify: terser_webpack_plugin_1.default.esbuildMinify,
        // `terserOptions` options will be passed to `esbuild`
        // Link to options - https://esbuild.github.io/api/#minify
        terserOptions: {
            minify: true,
        },
    });
}
function CreateTerserPluginForPrerender() {
    return new terser_webpack_plugin_1.default({
        extractComments: false,
        terserOptions: {
            parse: {
                // We want terser to parse ecma 8 code. However, we don't want it
                // to apply any minification steps that turns valid ecma 5 code
                // into invalid ecma 5 code. This is why the 'compress' and 'output'
                // sections only apply transformations that are ecma 5 safe
                // https://github.com/facebook/create-react-app/pull/4234
                ecma: 8,
            },
            compress: {
                ecma: 5,
                warnings: false,
                // Disabled because of an issue with Uglify breaking seemingly valid code:
                // https://github.com/facebook/create-react-app/issues/2376
                // Pending further investigation:
                // https://github.com/mishoo/UglifyJS2/issues/2011
                comparisons: false,
                // Disabled because of an issue with Terser breaking valid code:
                // https://github.com/facebook/create-react-app/issues/5250
                // Pending further investigation:
                // https://github.com/terser-js/terser/issues/120
                inline: 2,
            },
            mangle: {
                safari10: true,
            },
            output: {
                ecma: 5,
                comments: false,
                // Turned on because emoji and regex is not minified properly using default
                // https://github.com/facebook/create-react-app/issues/2488
                ascii_only: true,
            },
        },
    });
}
function addDevServer(configMutator) {
    return configMutator.addTopLevel('devServer', {
        allowedHosts: 'all',
        historyApiFallback: {
            index: '/index.html',
            disableDotRule: true,
        },
        headers: {
            'Access-Control-Allow-Origin': '*',
        },
    });
}
exports.addDevServer = addDevServer;
function setOutput(configMutator) {
    // eslint-disable-next-line no-param-reassign
    if (!configMutator.raw.output)
        configMutator.raw.output = {};
    // eslint-disable-next-line no-param-reassign
    configMutator.raw.output.publicPath = '/';
    return configMutator;
}
exports.setOutput = setOutput;
function replaceTerserPlugin({ prerender = false, }) {
    return (configMutator) => {
        var _a, _b, _c;
        if (!((_a = configMutator.raw.optimization) === null || _a === void 0 ? void 0 : _a.minimizer))
            return configMutator;
        (0, lodash_1.remove)((_b = configMutator.raw.optimization) === null || _b === void 0 ? void 0 : _b.minimizer, (minimizer) => {
            return minimizer.constructor.name === 'TerserPlugin';
        });
        const terserer = prerender
            ? CreateTerserPluginForPrerender()
            : CreateTerserPlugin();
        (_c = configMutator.raw.optimization) === null || _c === void 0 ? void 0 : _c.minimizer.push(terserer);
        return configMutator;
    };
}
exports.replaceTerserPlugin = replaceTerserPlugin;
//# sourceMappingURL=mutators.js.map