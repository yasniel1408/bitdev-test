import type { Bundler, DevServer } from '@teambit/bundler';
import type { Logger } from '@teambit/logger';
import { Application, AppContext, AppBuildContext, AppResult } from '@teambit/application';
import { DependencyResolverMain } from '@teambit/dependency-resolver';
import { WebpackConfigTransformer } from '@teambit/webpack';
import { PubsubMain } from '@teambit/pubsub';
import { ReactAppBuildResult } from './react-build-result';
import { ReactAppPrerenderOptions } from './react-app-options';
import { ReactDeployContext } from './deploy-context';
export declare class ReactApp implements Application {
    readonly name: string;
    readonly entry: string[] | ((path?: string) => Promise<string[]>);
    readonly ssr: string | (() => Promise<string>) | undefined;
    readonly portRange: [number, number];
    private logger;
    private dependencyResolver;
    readonly pubsub: PubsubMain;
    readonly workspacePath: string;
    readonly prerender?: ReactAppPrerenderOptions;
    readonly bundler?: Bundler;
    readonly ssrBundler?: Bundler;
    readonly devServer?: DevServer;
    readonly transformers: WebpackConfigTransformer[];
    readonly deploy?: (context: ReactDeployContext) => Promise<void>;
    readonly favicon?: string;
    constructor(name: string, entry: string[] | ((path?: string) => Promise<string[]>), ssr: string | (() => Promise<string>) | undefined, portRange: [number, number], logger: Logger, dependencyResolver: DependencyResolverMain, pubsub: PubsubMain, workspacePath: string, prerender?: ReactAppPrerenderOptions, bundler?: Bundler, ssrBundler?: Bundler, devServer?: DevServer, transformers?: WebpackConfigTransformer[], deploy?: (context: ReactDeployContext) => Promise<void>, favicon?: string);
    readonly applicationType = "react-common-js";
    readonly dir = "public";
    readonly ssrDir = "ssr";
    run(context: AppContext): Promise<number>;
    /**
     * create an instance of bit-compliant webpack dev server for a set of components
     */
    private createDevServer;
    runSsr(context: AppContext): Promise<AppResult>;
    private buildClient;
    private createBundler;
    private buildSsr;
    build(context: AppBuildContext): Promise<ReactAppBuildResult>;
    private buildSsrApp;
    private getSsrPolicy;
    private getBundler;
    private getSsrBundler;
    private getDefaultBundler;
    private getDefaultSsrBundler;
    private getBuildContext;
    private getPublicDir;
    private getEntries;
    private getSsrEntries;
    private getDevServerContext;
    private getHostDependencies;
    private createDevServerConfig;
}
