import type { ReactAppOptions } from './react-app-options';
import type { Logger } from '@teambit/logger';
import {
  DependencyResolverAspect,
  DependencyResolverMain,
} from '@teambit/dependency-resolver';
import WorkspaceAspect from '@teambit/workspace';
import { ApplicationType } from '@teambit/application';
import { EnvContext, EnvHandler } from '@teambit/envs';
import { ReactApp } from './react.application';

export type ReactAppTypeOptions = {
  name?: string;
};

export class ReactAppType implements ApplicationType<ReactAppOptions> {
  constructor(
    readonly name: string,
    private logger: Logger,
    private dependencyResolver: DependencyResolverMain,
    private pubsub: any,
    private workspacePath: string
  ) {}

  createApp(options: ReactAppOptions) {
    return new ReactApp(
      options.name,
      options.entry,
      options.ssr,
      options.portRange || [3000, 4000],
      this.logger,
      this.dependencyResolver,
      this.pubsub,
      this.workspacePath,
      options.prerender,
      options.bundler,
      options.ssrBundler,
      options.devServer,
      options.webpackTransformers,
      options.deploy,
      options.favicon
    );
  }

  static from(
    appTypeOptions: ReactAppTypeOptions = {}
  ): EnvHandler<ReactAppType> {
    return (context: EnvContext) => {
      const name = appTypeOptions.name || 'react-18-app';
      const logger = context.createLogger(name);
      const depsResolver = context.getAspect<DependencyResolverMain>(
        DependencyResolverAspect.id
      );
      let workspacePath;
      // TODO: replace this try catch with context.hasAspect once it's available from harmony
      try {
        workspacePath = context.getAspect<any>(WorkspaceAspect.id)?.path;
      } catch (err) {
        // Ignore, we might be running not from within a workspace, for example when bit sign
        // this is fine.
      }
      const pubsub = context.getAspect<any>('teambit.harmony/pubsub');
      return new ReactAppType(
        name,
        logger,
        depsResolver,
        pubsub,
        workspacePath
      );
    };
  }
}
