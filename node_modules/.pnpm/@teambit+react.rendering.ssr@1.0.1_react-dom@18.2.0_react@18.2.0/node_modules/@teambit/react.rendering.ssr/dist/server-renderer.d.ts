import React from 'react';
import type { ReactNode, ComponentType, PropsWithChildren } from 'react';
import type { HtmlProps } from '@teambit/ui-foundation.ui.rendering.html';
import { ServerRenderPlugin } from './render-plugins';
import { SsrSession } from './ssr-session';
interface HtmlTemplate extends React.FC<HtmlProps> {
    fillContent: (rawHtml: string, content: string) => string;
}
export declare type ServerRendererOptions = {
    htmlTemplate: HtmlTemplate;
    mountPoint: ComponentType<PropsWithChildren<{}>>;
};
export declare class ServerRenderer {
    /** effect rendering at key triggers. keep order consistent between server and browser */
    private plugins;
    options: ServerRendererOptions;
    constructor(
    /** effect rendering at key triggers. keep order consistent between server and browser */
    plugins: ServerRenderPlugin<any>[], options?: Partial<ServerRendererOptions>);
    /** render dehydrated server-side */
    render(children: ReactNode, session: SsrSession): Promise<string>;
    private triggerServerInit;
    private triggerBeforeRender;
    private getReactContexts;
    private serialize;
}
export {};
