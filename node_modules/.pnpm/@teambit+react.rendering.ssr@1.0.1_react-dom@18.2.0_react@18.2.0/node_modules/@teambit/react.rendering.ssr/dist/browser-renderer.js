"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BrowserRenderer = void 0;
const react_1 = __importDefault(require("react"));
const lodash_compact_1 = __importDefault(require("lodash.compact"));
const react_dom_1 = __importDefault(require("react-dom"));
const ui_foundation_ui_rendering_html_1 = require("@teambit/ui-foundation.ui.rendering.html");
const base_ui_utils_composer_1 = require("@teambit/base-ui.utils.composer");
const defaultOptions = {
    popAssets: ui_foundation_ui_rendering_html_1.Html.popAssets,
    mountPointElement: ui_foundation_ui_rendering_html_1.mountPointId,
    cleanup: ui_foundation_ui_rendering_html_1.ssrCleanup,
};
class BrowserRenderer {
    constructor(
    /** effect rendering at key triggers. keep order consistent between server and browser */
    plugins, options) {
        this.plugins = plugins;
        this.options = Object.assign(Object.assign({}, options), defaultOptions);
    }
    /** render and rehydrate client-side */
    render(children) {
        return __awaiter(this, void 0, void 0, function* () {
            // (*) load state from the dom
            const deserializedState = yield this.deserialize();
            // (1) init setup client plugins
            let renderContexts = yield this.triggerBrowserInit(deserializedState);
            // (2) make react dom
            const reactContexts = this.getReactContexts(renderContexts);
            const app = react_1.default.createElement(base_ui_utils_composer_1.Composer, { components: reactContexts }, children);
            renderContexts = yield this.triggerBeforeHydrateHook(renderContexts, app);
            // (3) render / rehydrate
            const mountPoint = typeof this.options.mountPointElement === 'string'
                ? document.getElementById(this.options.mountPointElement)
                : this.options.mountPointElement;
            // .render() already runs `.hydrate()` behind the scenes.
            // in the future, we may want to replace it with .hydrate()
            react_dom_1.default.render(app, mountPoint);
            yield this.triggerHydrateHook(renderContexts, mountPoint);
            // (3.1) remove ssr only styles
            this.options.cleanup();
        });
    }
    deserialize() {
        return __awaiter(this, void 0, void 0, function* () {
            const { plugins } = this;
            const rawAssets = this.options.popAssets();
            const deserialized = yield Promise.all(plugins.map((plugin) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                if (!('deserialize' in plugin))
                    return undefined;
                if (!plugin.key)
                    throw new Error('Key is required for .deserialize()');
                try {
                    const raw = rawAssets.get(plugin.key);
                    return (_a = plugin.deserialize) === null || _a === void 0 ? void 0 : _a.call(plugin, raw);
                }
                catch (e) {
                    // eslint-disable-next-line no-console
                    console.error(`failed deserializing server state for aspect "${plugin.key}"`, e);
                    return undefined;
                }
            })));
            return deserialized;
        });
    }
    triggerBrowserInit(deserializedState) {
        const { plugins } = this;
        const initPromises = plugins.map((plugin, idx) => {
            var _a;
            const state = deserializedState[idx];
            return (_a = plugin.browserInit) === null || _a === void 0 ? void 0 : _a.call(plugin, state);
        });
        return Promise.all(initPromises);
    }
    triggerBeforeHydrateHook(renderContexts, app) {
        const { plugins } = this;
        const promises = plugins.map((plugin, idx) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const ctx = renderContexts[idx];
            const nextCtx = yield ((_a = plugin.onBeforeHydrate) === null || _a === void 0 ? void 0 : _a.call(plugin, ctx, app));
            return nextCtx || ctx;
        }));
        return Promise.all(promises);
    }
    triggerHydrateHook(renderContexts, mountPoint) {
        return __awaiter(this, void 0, void 0, function* () {
            const { plugins } = this;
            const promises = plugins.map((plugin, idx) => {
                var _a;
                const renderCtx = renderContexts[idx];
                return (_a = plugin.onHydrate) === null || _a === void 0 ? void 0 : _a.call(plugin, renderCtx, mountPoint);
            });
            yield Promise.all(promises);
        });
    }
    getReactContexts(renderContexts) {
        const { plugins } = this;
        return (0, lodash_compact_1.default)(plugins.map((plugin, idx) => {
            const renderCtx = renderContexts[idx];
            const props = { renderCtx };
            const decorator = plugin.reactClientContext || plugin.reactContext;
            if (!decorator)
                return undefined;
            return [decorator, props];
        }));
    }
}
exports.BrowserRenderer = BrowserRenderer;
//# sourceMappingURL=browser-renderer.js.map