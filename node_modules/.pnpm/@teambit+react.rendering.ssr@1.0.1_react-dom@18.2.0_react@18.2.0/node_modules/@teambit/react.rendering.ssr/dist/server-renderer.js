"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ServerRenderer = void 0;
const react_1 = __importDefault(require("react"));
const webpack_merge_1 = require("webpack-merge");
const lodash_compact_1 = __importDefault(require("lodash.compact"));
const server_1 = __importDefault(require("react-dom/server"));
const ui_foundation_ui_rendering_html_1 = require("@teambit/ui-foundation.ui.rendering.html");
const base_ui_utils_composer_1 = require("@teambit/base-ui.utils.composer");
const defaultOptions = {
    htmlTemplate: ui_foundation_ui_rendering_html_1.Html,
    mountPoint: ui_foundation_ui_rendering_html_1.MountPoint,
};
class ServerRenderer {
    constructor(
    /** effect rendering at key triggers. keep order consistent between server and browser */
    plugins, options) {
        this.plugins = plugins;
        this.options = Object.assign(Object.assign({}, options), defaultOptions);
    }
    /** render dehydrated server-side */
    render(children, session) {
        return __awaiter(this, void 0, void 0, function* () {
            // (1) init
            let renderContexts = yield this.triggerServerInit(session);
            // (2) make React dom
            const reactContexts = this.getReactContexts(renderContexts);
            const MountPoint = this.options.mountPoint;
            const app = (react_1.default.createElement(MountPoint, null,
                react_1.default.createElement(base_ui_utils_composer_1.Composer, { components: reactContexts }, children)));
            renderContexts = yield this.triggerBeforeRender(renderContexts, app);
            // (3) render (to string)
            const renderedApp = server_1.default.renderToString(app);
            // (*) serialize state
            const realtimeAssets = yield this.serialize(renderContexts, app);
            // @ts-ignore // TODO upgrade 'webpack-merge'
            const totalAssets = (0, webpack_merge_1.merge)(session.assets, realtimeAssets);
            // (4) render html-template (to string)
            const Template = this.options.htmlTemplate;
            const html = react_1.default.createElement(Template, { assets: totalAssets, withDevTools: true, fullHeight: true, ssr: true });
            const renderedHtml = `<!DOCTYPE html>${server_1.default.renderToStaticMarkup(html)}`;
            const fullHtml = Template.fillContent(renderedHtml, renderedApp);
            // (5) serve
            return fullHtml;
        });
    }
    triggerServerInit(session) {
        const { plugins } = this;
        const promises = plugins.map((plugin) => { var _a; return (_a = plugin.serverInit) === null || _a === void 0 ? void 0 : _a.call(plugin, session); });
        return Promise.all(promises);
    }
    triggerBeforeRender(renderContexts, app) {
        return __awaiter(this, void 0, void 0, function* () {
            const { plugins } = this;
            const promises = plugins.map((plugin, idx) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                const ctx = renderContexts[idx];
                const nextCtx = yield ((_a = plugin.onBeforeRender) === null || _a === void 0 ? void 0 : _a.call(plugin, ctx, app));
                return nextCtx || ctx;
            }));
            yield Promise.all(promises);
            return renderContexts;
        });
    }
    getReactContexts(renderContexts) {
        const { plugins } = this;
        return (0, lodash_compact_1.default)(plugins.map((plugin, idx) => {
            const renderCtx = renderContexts[idx];
            const props = { renderCtx };
            const decorator = plugin.reactServerContext || plugin.reactContext;
            if (!decorator)
                return undefined;
            return [decorator, props];
        }));
    }
    serialize(renderContexts, app) {
        return __awaiter(this, void 0, void 0, function* () {
            const { plugins } = this;
            const json = {};
            const promises = plugins.map((plugin, idx) => __awaiter(this, void 0, void 0, function* () {
                var _a;
                if (!('serialize' in plugin))
                    return;
                if (!plugin.key)
                    throw new Error('Key is required for .serialize()');
                const renderCtx = renderContexts[idx];
                const result = yield ((_a = plugin.serialize) === null || _a === void 0 ? void 0 : _a.call(plugin, renderCtx, app));
                if (!result)
                    return;
                if (result.json)
                    json[plugin.key] = result.json;
            }));
            yield Promise.all(promises);
            // more assets will be available in the future
            return { json };
        });
    }
}
exports.ServerRenderer = ServerRenderer;
//# sourceMappingURL=server-renderer.js.map