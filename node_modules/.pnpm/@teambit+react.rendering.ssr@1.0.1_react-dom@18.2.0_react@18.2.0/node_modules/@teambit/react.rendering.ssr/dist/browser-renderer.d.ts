import { ReactNode } from 'react';
import { ClientRenderPlugin } from './render-plugins';
export declare type BrowserRendererOptions = {
    /** load and remove dehydrated state from the dom  */
    popAssets: () => Map<string, string>;
    /** mount point element or id */
    mountPointElement: string | HTMLElement;
    /** runs after rehydration */
    cleanup: () => void;
};
export declare class BrowserRenderer {
    /** effect rendering at key triggers. keep order consistent between server and browser */
    private plugins;
    options: BrowserRendererOptions;
    constructor(
    /** effect rendering at key triggers. keep order consistent between server and browser */
    plugins: ClientRenderPlugin<any, any>[], options?: Partial<BrowserRendererOptions>);
    /** render and rehydrate client-side */
    render(children: ReactNode): Promise<void>;
    private deserialize;
    private triggerBrowserInit;
    private triggerBeforeHydrateHook;
    private triggerHydrateHook;
    private getReactContexts;
}
