"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var Storage_1 = __importDefault(require("./Storage"));
var promise_limit_1 = __importDefault(require("promise-limit"));
var Options_1 = require("./Options");
var schema_utils_1 = require("schema-utils");
var ts_deepmerge_1 = __importDefault(require("ts-deepmerge"));
// Fetch polyfill for jsdom
var whatwg_fetch_1 = require("whatwg-fetch");
var shim = function (window) {
    /* eslint-disable @typescript-eslint/no-unsafe-assignment,@typescript-eslint/no-unsafe-call,@typescript-eslint/no-unsafe-member-access,@typescript-eslint/ban-ts-comment */
    // @ts-ignore
    !window.SVGElement && (window.SVGElement = window.HTMLElement);
    // @ts-ignore
    !window.localStorage && (window.localStorage = new Storage_1.default());
    // @ts-ignore
    !window.sessionStorage && (window.sessionStorage = new Storage_1.default());
    global.XMLHttpRequest = window.XMLHttpRequest;
    window.fetch = whatwg_fetch_1.fetch;
    window.Headers = whatwg_fetch_1.Headers;
    window.Request = whatwg_fetch_1.Request;
    window.Response = whatwg_fetch_1.Response;
    /* eslint-enable */
};
var JSDOMRenderer = /** @class */ (function () {
    function JSDOMRenderer(options) {
        if (options === void 0) { options = {}; }
        (0, schema_utils_1.validate)(Options_1.schema, options, {
            name: 'Renderer JSDOM',
            baseDataPath: 'options',
        });
        this.options = (0, ts_deepmerge_1.default)(Options_1.defaultOptions, options);
        if (options.renderAfterTime && this.options.timeout < options.renderAfterTime) {
            this.options.timeout = options.renderAfterTime + 1000;
        }
    }
    JSDOMRenderer.prototype.initialize = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    JSDOMRenderer.prototype.renderRoutes = function (routes, prerenderer) {
        var _this = this;
        var rootOptions = prerenderer.getOptions();
        var limiter = (0, promise_limit_1.default)(this.options.maxConcurrentRoutes);
        var host = "http://".concat(rootOptions.server.host, ":").concat(rootOptions.server.port);
        return Promise.all(routes.map(function (route) { return limiter(function () { return _this.getPageContent(host, route); }); }));
    };
    JSDOMRenderer.prototype.getPageContent = function (host, originalRoute) {
        var options = this.options;
        return new Promise(function (resolve, reject) {
            var int = null;
            var tim = null;
            Promise.resolve().then(function () { return __importStar(require('jsdom')); }).then(function (_a) {
                var JSDOM = _a.JSDOM;
                var captureDocument = function () {
                    if (int !== null) {
                        clearInterval(int);
                    }
                    void pr.then(function (dom) {
                        if (tim !== null) {
                            clearTimeout(tim);
                        }
                        var result = {
                            originalRoute: originalRoute,
                            route: originalRoute,
                            html: dom.serialize(),
                        };
                        dom.window.close();
                        resolve(result);
                    });
                };
                var pr = JSDOM.fromURL("".concat(host).concat(originalRoute), __assign(__assign({ runScripts: 'dangerously', resources: 'usable', pretendToBeVisual: true }, options.JSDOMOptions), { beforeParse: function (window) {
                        var _a;
                        if ((_a = options.JSDOMOptions) === null || _a === void 0 ? void 0 : _a.beforeParse) {
                            options.JSDOMOptions.beforeParse(window);
                        }
                        // Injection / shimming must happen before we resolve with the window,
                        // otherwise the page will finish loading before the injection happens.
                        if (options.inject) {
                            window[options.injectProperty] = options.inject;
                        }
                        window.addEventListener('error', function (event) {
                            console.error(event.error);
                        });
                        var timeout = options.timeout;
                        var doc = window.document;
                        if (timeout && !options.renderAfterTime) {
                            var timeS_1 = Math.round(timeout / 100) / 10;
                            tim = setTimeout(function () {
                                int && clearInterval(int);
                                if (options.renderAfterDocumentEvent) {
                                    reject(new Error("Could not prerender: event '".concat(options.renderAfterDocumentEvent, "' did not occur within ").concat(timeS_1, "s")));
                                }
                                else if (options.renderAfterElementExists) {
                                    reject(new Error("Could not prerender: element '".concat(options.renderAfterElementExists, "' did not appear within ").concat(timeS_1, "s")));
                                }
                                else {
                                    reject(new Error("Could not prerender: timed-out after ".concat(timeS_1, "s")));
                                }
                            }, timeout);
                        }
                        var fallback = true;
                        // Make all options `or`, the fastest to happen will trigger the rendering
                        if (options.renderAfterDocumentEvent) {
                            fallback = false;
                            // CAPTURE WHEN AN EVENT FIRES ON THE DOCUMENT
                            var event_1 = options.renderAfterDocumentEvent;
                            doc.addEventListener(event_1, captureDocument);
                        }
                        if (options.renderAfterElementExists) {
                            fallback = false;
                            // CAPTURE ONCE A SPECIFIC ELEMENT EXISTS
                            var selector_1 = options.renderAfterElementExists;
                            int = setInterval(function () {
                                if (doc.querySelector(selector_1)) {
                                    captureDocument();
                                }
                            }, 50);
                        }
                        if (options.renderAfterTime) {
                            fallback = false;
                            // CAPTURE AFTER A NUMBER OF MILLISECONDS
                            setTimeout(captureDocument, options.renderAfterTime);
                        }
                        if (fallback) {
                            // DEFAULT: RUN IMMEDIATELY
                            doc.addEventListener('DOMContentLoaded', captureDocument);
                        }
                        shim(window);
                    } }));
                pr.catch(reject);
            }).catch(reject);
        });
    };
    JSDOMRenderer.prototype.destroy = function () {
        // NOOP
    };
    return JSDOMRenderer;
}());
exports.default = JSDOMRenderer;
