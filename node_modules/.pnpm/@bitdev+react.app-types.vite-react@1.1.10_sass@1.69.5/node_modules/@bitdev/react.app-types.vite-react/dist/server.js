"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createSsrServer = void 0;
// @/server.js
const fs_1 = require("fs");
const path_1 = require("path");
const express_1 = __importDefault(require("express"));
const compression_1 = __importDefault(require("compression"));
function createSsrServer(options) {
    return __awaiter(this, void 0, void 0, function* () {
        const app = (0, express_1.default)();
        const vite = options.viteServer;
        /**
         * set middlewares.
         */
        app.use((0, compression_1.default)());
        app.use(vite.middlewares);
        app.use("*", (req, res, next) => __awaiter(this, void 0, void 0, function* () {
            const url = req.originalUrl;
            try {
                const template = (0, fs_1.readFileSync)((0, path_1.resolve)(options.indexHtmlPath), "utf-8");
                const tranformedTemplate = yield vite.transformIndexHtml(url, template);
                const serverModule = yield vite.ssrLoadModule(options.serverEntryFile);
                const render = (serverModule === null || serverModule === void 0 ? void 0 : serverModule.render) || (serverModule === null || serverModule === void 0 ? void 0 : serverModule.default);
                const loadScripts = serverModule === null || serverModule === void 0 ? void 0 : serverModule.loadScripts;
                if (!render)
                    throw new Error('implement a `render` method for the dev server to run, or turn `ssr: false` in your `bit-app` file');
                const appHtml = yield render({ path: url });
                const scripts = loadScripts ? yield loadScripts() : undefined;
                const htmlWithBody = tranformedTemplate.replace(`<!--ssr-outlet-->`, appHtml);
                const html = scripts
                    ? htmlWithBody.replace('<!--ssr-head-outlet-->', scripts)
                    : htmlWithBody.replace('<!--ssr-head-outlet-->', '');
                res.statusCode = 200;
                res.setHeader("Content-Type", "text/html");
                res.end(html);
            }
            catch (error) {
                if (vite)
                    vite.ssrFixStacktrace(error);
                // eslint-disable-next-line no-console
                console.error(error);
                next(error);
            }
        }));
        return app;
    });
}
exports.createSsrServer = createSsrServer;
//# sourceMappingURL=server.js.map