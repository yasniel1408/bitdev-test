"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const fs_1 = require("fs");
const path_1 = require("path");
function createServer() {
    return __awaiter(this, void 0, void 0, function* () {
        const app = (0, express_1.default)();
        const publicPath = __dirname;
        app.use(express_1.default.static(publicPath, {
            index: false
        }));
        // eslint-disable-next-line import/no-dynamic-require, global-require
        const serverComponent = require((0, path_1.join)(publicPath, './server-ssr'));
        app.use('/', (req, res) => __awaiter(this, void 0, void 0, function* () {
            const content = yield serverComponent.render({ path: req.url });
            const loadScripts = serverComponent === null || serverComponent === void 0 ? void 0 : serverComponent.loadScripts;
            const indexHtml = (0, fs_1.readFileSync)((0, path_1.join)(publicPath, 'index.html')).toString('utf-8');
            const scripts = loadScripts ? yield loadScripts() : undefined;
            const htmlWithBody = indexHtml.replace(`<!--ssr-outlet-->`, content);
            const html = scripts
                ? htmlWithBody.replace('<!--ssr-head-outlet-->', scripts)
                : htmlWithBody.replace('<!--ssr-head-outlet-->', '');
            res.statusCode = 200;
            res.setHeader("Content-Type", "text/html");
            res.send(html);
        }));
        return app;
    });
}
createServer().then((server) => {
    const args = process.argv.slice(2) || [];
    const [targetPort] = args;
    const port = targetPort || 8080;
    server.listen(port, () => {
        // eslint-disable-next-line no-console
        console.log(`server is listening to port ${port}`);
    });
});
//# sourceMappingURL=server-runner.js.map