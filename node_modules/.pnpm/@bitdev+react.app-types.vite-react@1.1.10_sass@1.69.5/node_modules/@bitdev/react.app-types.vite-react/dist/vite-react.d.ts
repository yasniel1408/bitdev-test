import { AppBuildContext, AppBuildResult, AppContext, Application, ApplicationInstance, DeployFn } from '@teambit/application';
import type { ConfigEnv } from 'vite';
import type { ViteReactAppOptions } from './vite-react-app-type';
export declare class ViteReact implements Application {
    /**
     * name of the application.
     */
    readonly name: string;
    /**
     * default port for the dev server and preview.
     */
    readonly portRange: [number, number];
    /**
     * entries to include.
     */
    readonly serverRoot: string;
    /**
     * vit config. overrides default react config.
     */
    readonly viteConfigPath: string;
    /**
     * use true to ignite vit in SSR mode.
     */
    readonly ssr: boolean;
    /**
     * name of the artifact.
     */
    readonly artifactName: string;
    /**
     * filename of the server.
     */
    readonly serverFilename: string;
    /**
     * the complication output dir to use.
     * change according to your env.
     * defaults to: `dist`
     */
    readonly compileOutputDir: string;
    /**
     * build config for the vite build of the server side code.
     * used for both the express server, and the ssr.
     * defaults to cjs.
     */
    readonly viteServerBuildConfigPath: string;
    /**
     * deploy function.
     */
    readonly deploy?: DeployFn;
    /**
     * peer dependencies to alias from the app component dependencies.
     */
    readonly peers: string[];
    /**
     * instance of vite.
     * uses the any type annotation to avoid type issues between versions. can be either a promise or a value.
     * @type typeof Vite
     */
    readonly vite: any;
    constructor(
    /**
     * name of the application.
     */
    name?: string, 
    /**
     * default port for the dev server and preview.
     */
    portRange?: [number, number], 
    /**
     * entries to include.
     */
    serverRoot?: string, 
    /**
     * vit config. overrides default react config.
     */
    viteConfigPath?: string, 
    /**
     * use true to ignite vit in SSR mode.
     */
    ssr?: boolean, 
    /**
     * name of the artifact.
     */
    artifactName?: string, 
    /**
     * filename of the server.
     */
    serverFilename?: string, 
    /**
     * the complication output dir to use.
     * change according to your env.
     * defaults to: `dist`
     */
    compileOutputDir?: string, 
    /**
     * build config for the vite build of the server side code.
     * used for both the express server, and the ssr.
     * defaults to cjs.
     */
    viteServerBuildConfigPath?: string, 
    /**
     * deploy function.
     */
    deploy?: DeployFn, 
    /**
     * peer dependencies to alias from the app component dependencies.
     */
    peers?: string[], 
    /**
     * instance of vite.
     * uses the any type annotation to avoid type issues between versions. can be either a promise or a value.
     * @type typeof Vite
     */
    vite?: any);
    readonly defaultPeers: string[];
    /**
     * run the dev server for a given context.
     * can run in both pwa or ssr modes.
     */
    run(context: AppContext): Promise<ApplicationInstance>;
    getEnvFile(mode: string, rootDir: string, overrides?: Record<string, string>): Promise<any>;
    private findViteConfig;
    loadViteConfig(config: ConfigEnv, componentDir: string, path: string): Promise<any>;
    private plugins;
    private computeConfig;
    private computeBuildClientConfig;
    private computeBuildConfig;
    private get outputDir();
    /**
     * app build.
     * building three entries, one for the server
     */
    build(context: AppBuildContext): Promise<AppBuildResult>;
    static from(options: ViteReactAppOptions): ViteReact;
}
