{
  "__schema": "APISchema",
  "location": {
    "filePath": "index.ts",
    "line": 1,
    "character": 1
  },
  "module": {
    "__schema": "ModuleSchema",
    "location": {
      "filePath": "index.ts",
      "line": 1,
      "character": 1
    },
    "exports": [
      {
        "__schema": "ClassSchema",
        "location": {
          "filePath": "jest-tester.ts",
          "line": 32,
          "character": 1
        },
        "signature": "class JestTester",
        "name": "JestTester",
        "members": [
          {
            "__schema": "ConstructorSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 35,
              "character": 3
            },
            "signature": "constructor JestTester(id: string, jestConfig: string, jestModulePath: string, jestWorker: HarmonyWorker<JestWorker>, logger: Logger, opts?: JestTesterOptions): JestTester",
            "name": "constructor",
            "params": [
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 36,
                  "character": 5
                },
                "name": "id",
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 36,
                    "character": 18
                  },
                  "name": "string"
                },
                "isOptional": false,
                "isSpread": false
              },
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 37,
                  "character": 5
                },
                "name": "jestConfig",
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 37,
                    "character": 26
                  },
                  "name": "string"
                },
                "isOptional": false,
                "isSpread": false
              },
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 38,
                  "character": 5
                },
                "name": "jestModulePath",
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 38,
                    "character": 29
                  },
                  "name": "string"
                },
                "isOptional": true,
                "defaultValue": "require.resolve('jest')",
                "isSpread": false
              },
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 39,
                  "character": 5
                },
                "name": "jestWorker",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 39,
                    "character": 25
                  },
                  "name": "HarmonyWorker",
                  "componentId": {
                    "scope": "teambit.harmony",
                    "name": "worker"
                  },
                  "typeArgs": [
                    {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "jest-tester.ts",
                        "line": 39,
                        "character": 39
                      },
                      "name": "JestWorker",
                      "internalFilePath": "jest.worker.ts"
                    }
                  ]
                },
                "isOptional": false,
                "isSpread": false
              },
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 40,
                  "character": 5
                },
                "name": "logger",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 40,
                    "character": 21
                  },
                  "name": "Logger",
                  "componentId": {
                    "scope": "teambit.harmony",
                    "name": "logger"
                  }
                },
                "isOptional": false,
                "isSpread": false
              },
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 41,
                  "character": 5
                },
                "name": "opts",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 41,
                    "character": 19
                  },
                  "name": "JestTesterOptions"
                },
                "isOptional": true,
                "defaultValue": "{}",
                "isSpread": false
              }
            ],
            "returnType": {
              "__schema": "ThisTypeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 32,
                "character": 1
              },
              "name": "JestTester"
            },
            "modifiers": []
          },
          {
            "__schema": "VariableLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 47,
              "character": 3
            },
            "signature": "(property) JestTester.configPath: string",
            "name": "configPath",
            "type": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 47,
                "character": 3
              },
              "type": "string"
            },
            "isOptional": true,
            "defaultValue": "this.jestConfig"
          },
          {
            "__schema": "VariableLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 50,
              "character": 3
            },
            "signature": "(property) JestTester.displayName: string",
            "name": "displayName",
            "type": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 50,
                "character": 3
              },
              "type": "string"
            },
            "isOptional": true,
            "defaultValue": "'Jest'"
          },
          {
            "__schema": "VariableLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 52,
              "character": 3
            },
            "signature": "(property) JestTester._callback: CallbackFn",
            "name": "_callback",
            "type": {
              "__schema": "TypeRefSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 52,
                "character": 3
              },
              "name": "CallbackFn",
              "componentId": {
                "scope": "teambit.defender",
                "name": "tester"
              }
            },
            "isOptional": false
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 54,
              "character": 3
            },
            "signature": "(method) JestTester.displayConfig(): string",
            "name": "displayConfig",
            "params": [],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 54,
                "character": 3
              },
              "type": "string"
            },
            "modifiers": []
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 58,
              "character": 3
            },
            "signature": "(method) JestTester.version(): string",
            "name": "version",
            "params": [],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 58,
                "character": 3
              },
              "type": "string"
            },
            "modifiers": []
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 168,
              "character": 3
            },
            "signature": "(method) JestTester.onTestRunComplete(callback: CallbackFn): Promise<void>",
            "name": "onTestRunComplete",
            "params": [
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 168,
                  "character": 27
                },
                "name": "callback",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 168,
                    "character": 37
                  },
                  "name": "CallbackFn",
                  "componentId": {
                    "scope": "teambit.defender",
                    "name": "tester"
                  }
                },
                "isOptional": false,
                "isSpread": false
              }
            ],
            "returnType": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 168,
                "character": 3
              },
              "type": "Promise<void>"
            },
            "modifiers": [
              "async"
            ]
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 172,
              "character": 3
            },
            "signature": "(method) JestTester.test(context: TesterContext): Promise<Tests>",
            "name": "test",
            "params": [
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 172,
                  "character": 14
                },
                "name": "context",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 172,
                    "character": 23
                  },
                  "name": "TesterContext",
                  "componentId": {
                    "scope": "teambit.defender",
                    "name": "tester"
                  }
                },
                "isOptional": false,
                "isSpread": false
              }
            ],
            "returnType": {
              "__schema": "TypeRefSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 172,
                "character": 39
              },
              "name": "Promise",
              "typeArgs": [
                {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 172,
                    "character": 47
                  },
                  "name": "Tests",
                  "componentId": {
                    "scope": "teambit.defender",
                    "name": "tester"
                  }
                }
              ]
            },
            "modifiers": [
              "async"
            ]
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 245,
              "character": 3
            },
            "signature": "(method) JestTester.watch(context: TesterContext): Promise<Tests>",
            "name": "watch",
            "params": [
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 245,
                  "character": 15
                },
                "name": "context",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 245,
                    "character": 24
                  },
                  "name": "TesterContext",
                  "componentId": {
                    "scope": "teambit.defender",
                    "name": "tester"
                  }
                },
                "isOptional": false,
                "isSpread": false
              }
            ],
            "returnType": {
              "__schema": "TypeRefSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 245,
                "character": 40
              },
              "name": "Promise",
              "typeArgs": [
                {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 245,
                    "character": 48
                  },
                  "name": "Tests",
                  "componentId": {
                    "scope": "teambit.defender",
                    "name": "tester"
                  }
                }
              ]
            },
            "modifiers": [
              "async"
            ]
          },
          {
            "__schema": "FunctionLikeSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 367,
              "character": 3
            },
            "signature": "(method) JestTester.from(options: JestOptions): EnvHandler<Tester>",
            "name": "from",
            "params": [
              {
                "__schema": "ParameterSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 367,
                  "character": 15
                },
                "name": "options",
                "type": {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 367,
                    "character": 24
                  },
                  "name": "JestOptions"
                },
                "isOptional": false,
                "isSpread": false
              }
            ],
            "returnType": {
              "__schema": "TypeRefSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 367,
                "character": 38
              },
              "name": "EnvHandler",
              "componentId": {
                "scope": "teambit.envs",
                "name": "envs"
              },
              "typeArgs": [
                {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 367,
                    "character": 49
                  },
                  "name": "Tester",
                  "componentId": {
                    "scope": "teambit.defender",
                    "name": "tester"
                  }
                }
              ]
            },
            "modifiers": [
              "static"
            ]
          }
        ],
        "extendsNodes": [],
        "implementNodes": [
          {
            "__schema": "ExpressionWithTypeArgumentsSchema",
            "location": {
              "filePath": "jest-tester.ts",
              "line": 32,
              "character": 36
            },
            "name": "implements Tester",
            "typeArgs": [],
            "expression": {
              "__schema": "TypeRefSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 32,
                "character": 36
              },
              "name": "Tester",
              "packageName": "/tmp/capsules-root/sign-capsules/2023-11-4/92ehz1/teambit.defender_jest-tester@fa408cc8163c77266fecbcf869663b9b2ea01f87/jest-tester.ts"
            }
          }
        ]
      },
      {
        "__schema": "VariableLikeSchema",
        "location": {
          "filePath": "jest-task.ts",
          "line": 12,
          "character": 14
        },
        "signature": "const JestTask: {\n    from: (options: JestTaskOptions) => TaskHandler;\n}",
        "name": "JestTask",
        "type": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "filePath": "jest-task.ts",
            "line": 12,
            "character": 14
          },
          "type": "{\n    from: (options: JestTaskOptions) => TaskHandler;\n}"
        },
        "isOptional": false,
        "defaultValue": "{\n  from: (options: JestTaskOptions): TaskHandler => {\n    const name = options.name || 'JestTest';\n    const description = options.description || 'testing components using Jest';\n    return TesterTask.from({\n      ...options,\n      name,\n      description,\n      tester: JestTester.from(options),\n    });\n  },\n}"
      },
      {
        "__schema": "TypeSchema",
        "location": {
          "filePath": "jest-task.ts",
          "line": 6,
          "character": 1
        },
        "signature": "type JestTaskOptions = {\n    name?: string;\n    config: string;\n    jest?: string;\n} & JestTesterOptions & Pick<TesterTaskOptions, \"description\">",
        "name": "JestTaskOptions",
        "type": {
          "__schema": "TypeIntersectionSchema",
          "location": {
            "filePath": "jest-task.ts",
            "line": 6,
            "character": 31
          },
          "types": [
            {
              "__schema": "TypeRefSchema",
              "location": {
                "filePath": "jest-task.ts",
                "line": 6,
                "character": 31
              },
              "name": "JestOptions"
            },
            {
              "__schema": "TypeRefSchema",
              "location": {
                "filePath": "jest-task.ts",
                "line": 7,
                "character": 3
              },
              "name": "Pick",
              "typeArgs": [
                {
                  "__schema": "TypeRefSchema",
                  "location": {
                    "filePath": "jest-task.ts",
                    "line": 7,
                    "character": 8
                  },
                  "name": "TesterTaskOptions",
                  "componentId": {
                    "scope": "teambit.defender",
                    "name": "tester-task",
                    "version": "1.0.6"
                  }
                },
                {
                  "__schema": "LiteralTypeSchema",
                  "location": {
                    "filePath": "jest-task.ts",
                    "line": 7,
                    "character": 27
                  },
                  "name": "'description'"
                }
              ]
            }
          ]
        }
      },
      {
        "__schema": "TypeSchema",
        "location": {
          "filePath": "jest-options.ts",
          "line": 23,
          "character": 1
        },
        "signature": "type JestOptions = {\n    name?: string;\n    config: string;\n    jest?: string;\n} & JestTesterOptions",
        "name": "JestOptions",
        "type": {
          "__schema": "TypeIntersectionSchema",
          "location": {
            "filePath": "jest-options.ts",
            "line": 23,
            "character": 27
          },
          "types": [
            {
              "__schema": "TypeLiteralSchema",
              "location": {
                "filePath": "jest-options.ts",
                "line": 23,
                "character": 27
              },
              "members": [
                {
                  "__schema": "VariableLikeSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 27,
                    "character": 3
                  },
                  "doc": {
                    "__schema": "DocSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 24,
                      "character": 3
                    },
                    "raw": "/**\n   * name of the tester. default to \"jest-tester\".\n   */",
                    "comment": "name of the tester. default to \"jest-tester\"."
                  },
                  "signature": "(property) name?: string",
                  "name": "name",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 27,
                      "character": 10
                    },
                    "name": "string"
                  },
                  "isOptional": true
                },
                {
                  "__schema": "VariableLikeSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 32,
                    "character": 3
                  },
                  "doc": {
                    "__schema": "DocSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 29,
                      "character": 3
                    },
                    "raw": "/**\n   * path to jest config.\n   */",
                    "comment": "path to jest config."
                  },
                  "signature": "(property) config: string",
                  "name": "config",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 32,
                      "character": 11
                    },
                    "name": "string"
                  },
                  "isOptional": false
                },
                {
                  "__schema": "VariableLikeSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 37,
                    "character": 3
                  },
                  "doc": {
                    "__schema": "DocSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 34,
                      "character": 3
                    },
                    "raw": "/**\n   * path to the jest module path to require.\n   */",
                    "comment": "path to the jest module path to require."
                  },
                  "signature": "(property) jest?: string",
                  "name": "jest",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 37,
                      "character": 10
                    },
                    "name": "string"
                  },
                  "isOptional": true
                }
              ]
            },
            {
              "__schema": "TypeRefSchema",
              "location": {
                "filePath": "jest-options.ts",
                "line": 38,
                "character": 5
              },
              "name": "JestTesterOptions"
            }
          ]
        }
      },
      {
        "__schema": "TypeSchema",
        "location": {
          "filePath": "jest-options.ts",
          "line": 4,
          "character": 1
        },
        "signature": "type JestTesterOptions = {\n    patterns?: string[];\n    roots?: string[];\n    resolveSpecPaths?: (component: Component, context: TesterContext) => string[];\n}",
        "name": "JestTesterOptions",
        "type": {
          "__schema": "TypeLiteralSchema",
          "location": {
            "filePath": "jest-options.ts",
            "line": 4,
            "character": 33
          },
          "members": [
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "jest-options.ts",
                "line": 8,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 5,
                  "character": 3
                },
                "raw": "/**\n   * array of patterns to test. (override the patterns provided by the context)\n   */",
                "comment": "array of patterns to test. (override the patterns provided by the context)"
              },
              "signature": "(property) patterns?: string[]",
              "name": "patterns",
              "type": {
                "__schema": "TypeArraySchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 8,
                  "character": 14
                },
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 8,
                    "character": 14
                  },
                  "name": "string"
                }
              },
              "isOptional": true
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "jest-options.ts",
                "line": 13,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 10,
                  "character": 3
                },
                "raw": "/**\n   * add more root paths to look for tests.\n   */",
                "comment": "add more root paths to look for tests."
              },
              "signature": "(property) roots?: string[]",
              "name": "roots",
              "type": {
                "__schema": "TypeArraySchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 13,
                  "character": 11
                },
                "type": {
                  "__schema": "KeywordTypeSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 13,
                    "character": 11
                  },
                  "name": "string"
                }
              },
              "isOptional": true
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "jest-options.ts",
                "line": 20,
                "character": 3
              },
              "doc": {
                "__schema": "DocSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 15,
                  "character": 3
                },
                "raw": "/**\n   * A function that knows to resolve the paths of the spec files.\n   * This usually used when you want only subset of your spec files to be used\n   * (usually when you use multi tester with different specs files for each tester instance).\n   */",
                "comment": "A function that knows to resolve the paths of the spec files.\nThis usually used when you want only subset of your spec files to be used\n(usually when you use multi tester with different specs files for each tester instance)."
              },
              "signature": "(property) resolveSpecPaths?: (component: Component, context: TesterContext) => string[]",
              "name": "resolveSpecPaths",
              "type": {
                "__schema": "FunctionLikeSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 20,
                  "character": 22
                },
                "signature": "(component: (component: teambit.component/component) Component, context: (component: teambit.defender/tester) TesterContext): string[]",
                "name": "",
                "params": [
                  {
                    "__schema": "ParameterSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 20,
                      "character": 23
                    },
                    "name": "component",
                    "type": {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 20,
                        "character": 34
                      },
                      "name": "Component",
                      "componentId": {
                        "scope": "teambit.component",
                        "name": "component"
                      }
                    },
                    "isOptional": false,
                    "isSpread": false
                  },
                  {
                    "__schema": "ParameterSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 20,
                      "character": 45
                    },
                    "name": "context",
                    "type": {
                      "__schema": "TypeRefSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 20,
                        "character": 54
                      },
                      "name": "TesterContext",
                      "componentId": {
                        "scope": "teambit.defender",
                        "name": "tester"
                      }
                    },
                    "isOptional": false,
                    "isSpread": false
                  }
                ],
                "returnType": {
                  "__schema": "TypeArraySchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 20,
                    "character": 72
                  },
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 20,
                      "character": 72
                    },
                    "name": "string"
                  }
                },
                "modifiers": []
              },
              "isOptional": true
            }
          ]
        }
      },
      {
        "__schema": "VariableLikeSchema",
        "location": {
          "filePath": "config/jest.cjs.config.js",
          "line": 9,
          "character": 7
        },
        "signature": "const cjsConfig: {\n    transform: {\n        '^.+\\\\.(js|jsx|ts|tsx|cjs)$': string;\n        '^.+\\\\.css$': string;\n        '^.+\\\\.svg$': string;\n    };\n    transformIgnorePatterns: string[];\n    modulePaths: any[];\n    moduleNameMapper: {\n        '\\\\.(css|styl|less|sass|scss|jpg|jpeg|png|gif|eot|otf|webp|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$': string;\n        '^.+\\\\.module\\\\.(css|sass|scss)$': string;\n    };\n    moduleFileExtensions: string[];\n}",
        "name": "cjsConfig",
        "type": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "filePath": "config/jest.cjs.config.js",
            "line": 9,
            "character": 7
          },
          "type": "{\n    transform: {\n        '^.+\\\\.(js|jsx|ts|tsx|cjs)$': string;\n        '^.+\\\\.css$': string;\n        '^.+\\\\.svg$': string;\n    };\n    transformIgnorePatterns: string[];\n    modulePaths: any[];\n    moduleNameMapper: {\n        '\\\\.(css|styl|less|sass|scss|jpg|jpeg|png|gif|eot|otf|webp|ttf|woff|woff2|mp4|webm|wav|mp3|m4a|aac|oga)$': string;\n        '^.+\\\\.module\\\\.(css|sass|scss)$': string;\n    };\n    moduleFileExtensions: string[];\n}"
        },
        "isOptional": false,
        "defaultValue": "{ ...baseConfig, transform: cjsTransform }"
      },
      {
        "__schema": "VariableLikeSchema",
        "location": {
          "filePath": "config/jest.esm.config.js",
          "line": 8,
          "character": 7
        },
        "signature": "const esmConfig: {\n    extensionsToTreatAsEsm: string[];\n    transform: {\n        '^.+\\\\.(js|jsx|ts|tsx)$': string;\n        '^.+\\\\.css$': string;\n        '^.+\\\\.svg$': string;\n    };\n    transformIgnorePatterns: string[];\n    modulePaths: any[];\n    moduleNameMapper: {\n        ...;\n    };\n    moduleFileExtensions: string[];\n}",
        "name": "esmConfig",
        "type": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "filePath": "config/jest.esm.config.js",
            "line": 8,
            "character": 7
          },
          "type": "{\n    extensionsToTreatAsEsm: string[];\n    transform: {\n        '^.+\\\\.(js|jsx|ts|tsx)$': string;\n        '^.+\\\\.css$': string;\n        '^.+\\\\.svg$': string;\n    };\n    transformIgnorePatterns: string[];\n    modulePaths: any[];\n    moduleNameMapper: {\n        ...;\n    };\n    moduleFileExtensions: string[];\n}"
        },
        "isOptional": false,
        "defaultValue": "{\n  ...baseConfig,\n  extensionsToTreatAsEsm: ['.ts', '.tsx', '.jsx'],\n  transform: esmTransform,\n}"
      },
      {
        "__schema": "UnImplementedSchema",
        "location": {
          "filePath": "config/jest.base.config.js",
          "line": 1,
          "character": 1
        },
        "name": "module.exports",
        "type": "PropertyAccessExpression"
      },
      {
        "__schema": "VariableLikeSchema",
        "location": {
          "filePath": "config/transformers/base-transformer-plugins.js",
          "line": 3,
          "character": 7
        },
        "signature": "const basePlugins: any[][]",
        "name": "basePlugins",
        "type": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "filePath": "config/transformers/base-transformer-plugins.js",
            "line": 3,
            "character": 7
          },
          "type": "any[][]"
        },
        "isOptional": false,
        "defaultValue": "[\n  [require('babel-plugin-transform-typescript-metadata')],\n  [require('@babel/plugin-proposal-decorators'), { legacy: true }],\n  // [require('@babel/plugin-transform-runtime')],\n  [require('@babel/plugin-transform-object-rest-spread')],\n  [require('@babel/plugin-transform-class-properties')],\n]"
      },
      {
        "__schema": "VariableLikeSchema",
        "location": {
          "filePath": "config/transformers/base-transformer-presets.js",
          "line": 3,
          "character": 7
        },
        "signature": "const basePresets: any[]",
        "name": "basePresets",
        "type": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "filePath": "config/transformers/base-transformer-presets.js",
            "line": 3,
            "character": 7
          },
          "type": "any[]"
        },
        "isOptional": false,
        "defaultValue": "[\n  require('@babel/preset-typescript'),\n  require('babel-preset-jest'),\n]"
      },
      {
        "__schema": "FunctionLikeSchema",
        "location": {
          "filePath": "config/transformers/base-transformer-process.js",
          "line": 3,
          "character": 7
        },
        "signature": "function(presets: any, plugins: any): (src: any, filename: any) => any",
        "name": "generateProcessFunc",
        "params": [
          {
            "__schema": "ParameterSchema",
            "location": {
              "filePath": "config/transformers/base-transformer-process.js",
              "line": 3,
              "character": 30
            },
            "name": "presets",
            "type": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "filePath": "config/transformers/base-transformer-process.js",
                "line": 3,
                "character": 30
              },
              "type": "any"
            },
            "isOptional": false,
            "isSpread": false
          },
          {
            "__schema": "ParameterSchema",
            "location": {
              "filePath": "config/transformers/base-transformer-process.js",
              "line": 3,
              "character": 39
            },
            "name": "plugins",
            "type": {
              "__schema": "InferenceTypeSchema",
              "location": {
                "filePath": "config/transformers/base-transformer-process.js",
                "line": 3,
                "character": 39
              },
              "type": "any"
            },
            "isOptional": false,
            "isSpread": false
          }
        ],
        "returnType": {
          "__schema": "InferenceTypeSchema",
          "location": {
            "filePath": "config/transformers/base-transformer-process.js",
            "line": 3,
            "character": 29
          },
          "type": "(src: any, filename: any) => any"
        },
        "modifiers": []
      },
      {
        "__schema": "UnImplementedSchema",
        "location": {
          "filePath": "config/transformers/cjs-transformer.js",
          "line": 29,
          "character": 3
        },
        "name": "cjsPlugins: plugins",
        "type": "PropertyAssignment"
      },
      {
        "__schema": "UnImplementedSchema",
        "location": {
          "filePath": "config/transformers/cjs-transformer.js",
          "line": 28,
          "character": 3
        },
        "name": "cjsPresets: presets",
        "type": "PropertyAssignment"
      },
      {
        "__schema": "UnImplementedSchema",
        "location": {
          "filePath": "config/transformers/esm-transformer.js",
          "line": 28,
          "character": 3
        },
        "name": "esmPlugins: plugins",
        "type": "PropertyAssignment"
      },
      {
        "__schema": "UnImplementedSchema",
        "location": {
          "filePath": "config/transformers/esm-transformer.js",
          "line": 27,
          "character": 3
        },
        "name": "esmPresets: presets",
        "type": "PropertyAssignment"
      }
    ],
    "internals": []
  },
  "internals": [
    {
      "__schema": "ModuleSchema",
      "location": {
        "filePath": "jest-tester.ts",
        "line": 1,
        "character": 1
      },
      "exports": [
        {
          "__schema": "ClassSchema",
          "location": {
            "filePath": "jest-tester.ts",
            "line": 32,
            "character": 1
          },
          "signature": "class JestTester",
          "name": "JestTester",
          "members": [
            {
              "__schema": "ConstructorSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 35,
                "character": 3
              },
              "signature": "constructor JestTester(id: string, jestConfig: string, jestModulePath: string, jestWorker: HarmonyWorker<JestWorker>, logger: Logger, opts?: JestTesterOptions): JestTester",
              "name": "constructor",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 36,
                    "character": 5
                  },
                  "name": "id",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 36,
                      "character": 18
                    },
                    "name": "string"
                  },
                  "isOptional": false,
                  "isSpread": false
                },
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 37,
                    "character": 5
                  },
                  "name": "jestConfig",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 37,
                      "character": 26
                    },
                    "name": "string"
                  },
                  "isOptional": false,
                  "isSpread": false
                },
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 38,
                    "character": 5
                  },
                  "name": "jestModulePath",
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 38,
                      "character": 29
                    },
                    "name": "string"
                  },
                  "isOptional": true,
                  "defaultValue": "require.resolve('jest')",
                  "isSpread": false
                },
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 39,
                    "character": 5
                  },
                  "name": "jestWorker",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 39,
                      "character": 25
                    },
                    "name": "HarmonyWorker",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "worker"
                    },
                    "typeArgs": [
                      {
                        "__schema": "TypeRefSchema",
                        "location": {
                          "filePath": "jest-tester.ts",
                          "line": 39,
                          "character": 39
                        },
                        "name": "JestWorker",
                        "internalFilePath": "jest.worker.ts"
                      }
                    ]
                  },
                  "isOptional": false,
                  "isSpread": false
                },
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 40,
                    "character": 5
                  },
                  "name": "logger",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 40,
                      "character": 21
                    },
                    "name": "Logger",
                    "componentId": {
                      "scope": "teambit.harmony",
                      "name": "logger"
                    }
                  },
                  "isOptional": false,
                  "isSpread": false
                },
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 41,
                    "character": 5
                  },
                  "name": "opts",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 41,
                      "character": 19
                    },
                    "name": "JestTesterOptions"
                  },
                  "isOptional": true,
                  "defaultValue": "{}",
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "ThisTypeSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 32,
                  "character": 1
                },
                "name": "JestTester"
              },
              "modifiers": []
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 47,
                "character": 3
              },
              "signature": "(property) JestTester.configPath: string",
              "name": "configPath",
              "type": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 47,
                  "character": 3
                },
                "type": "string"
              },
              "isOptional": true,
              "defaultValue": "this.jestConfig"
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 50,
                "character": 3
              },
              "signature": "(property) JestTester.displayName: string",
              "name": "displayName",
              "type": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 50,
                  "character": 3
                },
                "type": "string"
              },
              "isOptional": true,
              "defaultValue": "'Jest'"
            },
            {
              "__schema": "VariableLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 52,
                "character": 3
              },
              "signature": "(property) JestTester._callback: CallbackFn",
              "name": "_callback",
              "type": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 52,
                  "character": 3
                },
                "name": "CallbackFn",
                "componentId": {
                  "scope": "teambit.defender",
                  "name": "tester"
                }
              },
              "isOptional": false
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 54,
                "character": 3
              },
              "signature": "(method) JestTester.displayConfig(): string",
              "name": "displayConfig",
              "params": [],
              "returnType": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 54,
                  "character": 3
                },
                "type": "string"
              },
              "modifiers": []
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 58,
                "character": 3
              },
              "signature": "(method) JestTester.version(): string",
              "name": "version",
              "params": [],
              "returnType": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 58,
                  "character": 3
                },
                "type": "string"
              },
              "modifiers": []
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 168,
                "character": 3
              },
              "signature": "(method) JestTester.onTestRunComplete(callback: CallbackFn): Promise<void>",
              "name": "onTestRunComplete",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 168,
                    "character": 27
                  },
                  "name": "callback",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 168,
                      "character": 37
                    },
                    "name": "CallbackFn",
                    "componentId": {
                      "scope": "teambit.defender",
                      "name": "tester"
                    }
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "InferenceTypeSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 168,
                  "character": 3
                },
                "type": "Promise<void>"
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 172,
                "character": 3
              },
              "signature": "(method) JestTester.test(context: TesterContext): Promise<Tests>",
              "name": "test",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 172,
                    "character": 14
                  },
                  "name": "context",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 172,
                      "character": 23
                    },
                    "name": "TesterContext",
                    "componentId": {
                      "scope": "teambit.defender",
                      "name": "tester"
                    }
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 172,
                  "character": 39
                },
                "name": "Promise",
                "typeArgs": [
                  {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 172,
                      "character": 47
                    },
                    "name": "Tests",
                    "componentId": {
                      "scope": "teambit.defender",
                      "name": "tester"
                    }
                  }
                ]
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 245,
                "character": 3
              },
              "signature": "(method) JestTester.watch(context: TesterContext): Promise<Tests>",
              "name": "watch",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 245,
                    "character": 15
                  },
                  "name": "context",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 245,
                      "character": 24
                    },
                    "name": "TesterContext",
                    "componentId": {
                      "scope": "teambit.defender",
                      "name": "tester"
                    }
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 245,
                  "character": 40
                },
                "name": "Promise",
                "typeArgs": [
                  {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 245,
                      "character": 48
                    },
                    "name": "Tests",
                    "componentId": {
                      "scope": "teambit.defender",
                      "name": "tester"
                    }
                  }
                ]
              },
              "modifiers": [
                "async"
              ]
            },
            {
              "__schema": "FunctionLikeSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 367,
                "character": 3
              },
              "signature": "(method) JestTester.from(options: JestOptions): EnvHandler<Tester>",
              "name": "from",
              "params": [
                {
                  "__schema": "ParameterSchema",
                  "location": {
                    "filePath": "jest-tester.ts",
                    "line": 367,
                    "character": 15
                  },
                  "name": "options",
                  "type": {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 367,
                      "character": 24
                    },
                    "name": "JestOptions"
                  },
                  "isOptional": false,
                  "isSpread": false
                }
              ],
              "returnType": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 367,
                  "character": 38
                },
                "name": "EnvHandler",
                "componentId": {
                  "scope": "teambit.envs",
                  "name": "envs"
                },
                "typeArgs": [
                  {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-tester.ts",
                      "line": 367,
                      "character": 49
                    },
                    "name": "Tester",
                    "componentId": {
                      "scope": "teambit.defender",
                      "name": "tester"
                    }
                  }
                ]
              },
              "modifiers": [
                "static"
              ]
            }
          ],
          "extendsNodes": [],
          "implementNodes": [
            {
              "__schema": "ExpressionWithTypeArgumentsSchema",
              "location": {
                "filePath": "jest-tester.ts",
                "line": 32,
                "character": 36
              },
              "name": "implements Tester",
              "typeArgs": [],
              "expression": {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "jest-tester.ts",
                  "line": 32,
                  "character": 36
                },
                "name": "Tester",
                "packageName": "/tmp/capsules-root/sign-capsules/2023-11-4/92ehz1/teambit.defender_jest-tester@fa408cc8163c77266fecbcf869663b9b2ea01f87/jest-tester.ts"
              }
            }
          ]
        }
      ],
      "internals": []
    },
    {
      "__schema": "ModuleSchema",
      "location": {
        "filePath": "jest-task.ts",
        "line": 1,
        "character": 1
      },
      "exports": [
        {
          "__schema": "TypeSchema",
          "location": {
            "filePath": "jest-task.ts",
            "line": 6,
            "character": 1
          },
          "signature": "type JestTaskOptions = {\n    name?: string;\n    config: string;\n    jest?: string;\n} & JestTesterOptions & Pick<TesterTaskOptions, \"description\">",
          "name": "JestTaskOptions",
          "type": {
            "__schema": "TypeIntersectionSchema",
            "location": {
              "filePath": "jest-task.ts",
              "line": 6,
              "character": 31
            },
            "types": [
              {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "jest-task.ts",
                  "line": 6,
                  "character": 31
                },
                "name": "JestOptions"
              },
              {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "jest-task.ts",
                  "line": 7,
                  "character": 3
                },
                "name": "Pick",
                "typeArgs": [
                  {
                    "__schema": "TypeRefSchema",
                    "location": {
                      "filePath": "jest-task.ts",
                      "line": 7,
                      "character": 8
                    },
                    "name": "TesterTaskOptions",
                    "componentId": {
                      "scope": "teambit.defender",
                      "name": "tester-task",
                      "version": "1.0.6"
                    }
                  },
                  {
                    "__schema": "LiteralTypeSchema",
                    "location": {
                      "filePath": "jest-task.ts",
                      "line": 7,
                      "character": 27
                    },
                    "name": "'description'"
                  }
                ]
              }
            ]
          }
        },
        {
          "__schema": "VariableLikeSchema",
          "location": {
            "filePath": "jest-task.ts",
            "line": 12,
            "character": 14
          },
          "signature": "const JestTask: {\n    from: (options: JestTaskOptions) => TaskHandler;\n}",
          "name": "JestTask",
          "type": {
            "__schema": "InferenceTypeSchema",
            "location": {
              "filePath": "jest-task.ts",
              "line": 12,
              "character": 14
            },
            "type": "{\n    from: (options: JestTaskOptions) => TaskHandler;\n}"
          },
          "isOptional": false,
          "defaultValue": "{\n  from: (options: JestTaskOptions): TaskHandler => {\n    const name = options.name || 'JestTest';\n    const description = options.description || 'testing components using Jest';\n    return TesterTask.from({\n      ...options,\n      name,\n      description,\n      tester: JestTester.from(options),\n    });\n  },\n}"
        }
      ],
      "internals": []
    },
    {
      "__schema": "ModuleSchema",
      "location": {
        "filePath": "jest-options.ts",
        "line": 1,
        "character": 1
      },
      "exports": [
        {
          "__schema": "TypeSchema",
          "location": {
            "filePath": "jest-options.ts",
            "line": 4,
            "character": 1
          },
          "signature": "type JestTesterOptions = {\n    patterns?: string[];\n    roots?: string[];\n    resolveSpecPaths?: (component: Component, context: TesterContext) => string[];\n}",
          "name": "JestTesterOptions",
          "type": {
            "__schema": "TypeLiteralSchema",
            "location": {
              "filePath": "jest-options.ts",
              "line": 4,
              "character": 33
            },
            "members": [
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 8,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 5,
                    "character": 3
                  },
                  "raw": "/**\n   * array of patterns to test. (override the patterns provided by the context)\n   */",
                  "comment": "array of patterns to test. (override the patterns provided by the context)"
                },
                "signature": "(property) patterns?: string[]",
                "name": "patterns",
                "type": {
                  "__schema": "TypeArraySchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 8,
                    "character": 14
                  },
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 8,
                      "character": 14
                    },
                    "name": "string"
                  }
                },
                "isOptional": true
              },
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 13,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 10,
                    "character": 3
                  },
                  "raw": "/**\n   * add more root paths to look for tests.\n   */",
                  "comment": "add more root paths to look for tests."
                },
                "signature": "(property) roots?: string[]",
                "name": "roots",
                "type": {
                  "__schema": "TypeArraySchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 13,
                    "character": 11
                  },
                  "type": {
                    "__schema": "KeywordTypeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 13,
                      "character": 11
                    },
                    "name": "string"
                  }
                },
                "isOptional": true
              },
              {
                "__schema": "VariableLikeSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 20,
                  "character": 3
                },
                "doc": {
                  "__schema": "DocSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 15,
                    "character": 3
                  },
                  "raw": "/**\n   * A function that knows to resolve the paths of the spec files.\n   * This usually used when you want only subset of your spec files to be used\n   * (usually when you use multi tester with different specs files for each tester instance).\n   */",
                  "comment": "A function that knows to resolve the paths of the spec files.\nThis usually used when you want only subset of your spec files to be used\n(usually when you use multi tester with different specs files for each tester instance)."
                },
                "signature": "(property) resolveSpecPaths?: (component: Component, context: TesterContext) => string[]",
                "name": "resolveSpecPaths",
                "type": {
                  "__schema": "FunctionLikeSchema",
                  "location": {
                    "filePath": "jest-options.ts",
                    "line": 20,
                    "character": 22
                  },
                  "signature": "(component: (component: teambit.component/component) Component, context: (component: teambit.defender/tester) TesterContext): string[]",
                  "name": "",
                  "params": [
                    {
                      "__schema": "ParameterSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 20,
                        "character": 23
                      },
                      "name": "component",
                      "type": {
                        "__schema": "TypeRefSchema",
                        "location": {
                          "filePath": "jest-options.ts",
                          "line": 20,
                          "character": 34
                        },
                        "name": "Component",
                        "componentId": {
                          "scope": "teambit.component",
                          "name": "component"
                        }
                      },
                      "isOptional": false,
                      "isSpread": false
                    },
                    {
                      "__schema": "ParameterSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 20,
                        "character": 45
                      },
                      "name": "context",
                      "type": {
                        "__schema": "TypeRefSchema",
                        "location": {
                          "filePath": "jest-options.ts",
                          "line": 20,
                          "character": 54
                        },
                        "name": "TesterContext",
                        "componentId": {
                          "scope": "teambit.defender",
                          "name": "tester"
                        }
                      },
                      "isOptional": false,
                      "isSpread": false
                    }
                  ],
                  "returnType": {
                    "__schema": "TypeArraySchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 20,
                      "character": 72
                    },
                    "type": {
                      "__schema": "KeywordTypeSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 20,
                        "character": 72
                      },
                      "name": "string"
                    }
                  },
                  "modifiers": []
                },
                "isOptional": true
              }
            ]
          }
        },
        {
          "__schema": "TypeSchema",
          "location": {
            "filePath": "jest-options.ts",
            "line": 23,
            "character": 1
          },
          "signature": "type JestOptions = {\n    name?: string;\n    config: string;\n    jest?: string;\n} & JestTesterOptions",
          "name": "JestOptions",
          "type": {
            "__schema": "TypeIntersectionSchema",
            "location": {
              "filePath": "jest-options.ts",
              "line": 23,
              "character": 27
            },
            "types": [
              {
                "__schema": "TypeLiteralSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 23,
                  "character": 27
                },
                "members": [
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 27,
                      "character": 3
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 24,
                        "character": 3
                      },
                      "raw": "/**\n   * name of the tester. default to \"jest-tester\".\n   */",
                      "comment": "name of the tester. default to \"jest-tester\"."
                    },
                    "signature": "(property) name?: string",
                    "name": "name",
                    "type": {
                      "__schema": "KeywordTypeSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 27,
                        "character": 10
                      },
                      "name": "string"
                    },
                    "isOptional": true
                  },
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 32,
                      "character": 3
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 29,
                        "character": 3
                      },
                      "raw": "/**\n   * path to jest config.\n   */",
                      "comment": "path to jest config."
                    },
                    "signature": "(property) config: string",
                    "name": "config",
                    "type": {
                      "__schema": "KeywordTypeSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 32,
                        "character": 11
                      },
                      "name": "string"
                    },
                    "isOptional": false
                  },
                  {
                    "__schema": "VariableLikeSchema",
                    "location": {
                      "filePath": "jest-options.ts",
                      "line": 37,
                      "character": 3
                    },
                    "doc": {
                      "__schema": "DocSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 34,
                        "character": 3
                      },
                      "raw": "/**\n   * path to the jest module path to require.\n   */",
                      "comment": "path to the jest module path to require."
                    },
                    "signature": "(property) jest?: string",
                    "name": "jest",
                    "type": {
                      "__schema": "KeywordTypeSchema",
                      "location": {
                        "filePath": "jest-options.ts",
                        "line": 37,
                        "character": 10
                      },
                      "name": "string"
                    },
                    "isOptional": true
                  }
                ]
              },
              {
                "__schema": "TypeRefSchema",
                "location": {
                  "filePath": "jest-options.ts",
                  "line": 38,
                  "character": 5
                },
                "name": "JestTesterOptions"
              }
            ]
          }
        }
      ],
      "internals": []
    }
  ],
  "componentId": {
    "scope": "teambit.defender",
    "name": "jest-tester",
    "version": "fa408cc8163c77266fecbcf869663b9b2ea01f87"
  },
  "taggedModuleExports": []
}