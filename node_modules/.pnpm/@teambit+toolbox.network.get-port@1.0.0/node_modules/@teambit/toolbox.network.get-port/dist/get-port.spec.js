"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const chai_1 = require("chai");
const get_port_1 = require("./get-port");
describe('Get port', () => {
    it('it should return port from range', () => __awaiter(void 0, void 0, void 0, function* () {
        const port = yield get_port_1.Port.getPort(3100, 3200);
        (0, chai_1.expect)(typeof port).to.equal('number');
    }));
    it('it should return port', () => __awaiter(void 0, void 0, void 0, function* () {
        const port = yield get_port_1.Port.getPort(3300, 3400);
        (0, chai_1.expect)(port).to.equal(3300);
    }));
    it('it should return port', () => __awaiter(void 0, void 0, void 0, function* () {
        const port = yield get_port_1.Port.getPort(3500, 3600, [3500, 3501]);
        (0, chai_1.expect)(port).to.equal(3502);
    }));
    it('it should return port from range', () => __awaiter(void 0, void 0, void 0, function* () {
        const port = yield get_port_1.Port.getPortFromRange([7005, 7100]);
        (0, chai_1.expect)(port).to.equal(7005);
    }));
});
//# sourceMappingURL=get-port.spec.js.map